RegEx-101

The basic set of metacharacters was introduced
with the ed line editor, and made available in gr ep. Sed uses the same set of
metacharacters. Later a program named egrep was introduced that offer ed an
extended set of metacharacters. Awk uses essentially the same set of
metacharacters as egrep.

the regular expression “A.E” and it will match “ACE,” “ABE”, and “ALE”. It will match any character in the position following “A”.

“A. * E” matches any string that matches “A.E” but it will also match any number of characters between “A” and “E”: “AIRPLANE,” “A FINE,” “AFFABLE,” or “A LONG WAY HOME,”

Summary of Metacharacters
Special Characters   Usage
.
Matches any single character except newline. In awk, dot can match newline also.

* 
Matches any number (including zero) of the single character (including a character specified by a regular expression) that immediately precedes it.

[...]
 Matches any one of the class of characters enclosed between the brackets. A circumflex (ˆ) as first character inside brackets reverses the match to all characters except newline and those listed in the class. In awk, newline will also match. A hyphen (-) is used to indicate a range of characters. The close bracket (]) as the first character in class is a member of the class. All other metacharacters lose their meaning when specified as members of a class.
 
ˆ
 First character of regular expression, matches the beginning of the line. Matches the beginning of a string in awk, even if the string contains embedded newlines.
 
$
 As last character of regular expression, matches the end of the line. Matches the end of a string in awk, even if the string contains embedded newlines.

\{n,m\}
 Matches a range of occurrences of the single character (including a character specified by a regular expression) that immediately precedes it. \{n\} will match exactly n occurr ences, \{n,\} will match at least n occurr ences, and \{n,m\} will match any number of occurrences between n and m. (sed and gr ep only, may not be in some very old versions.)

\
 Escapes the special character that follows.
 

Extended Metacharacter s (egrep and awk)

+
    Matches one or more occurr ences of the preceding regular expression.

?
    Matches zero or one occurrences of the preceding regular expression.

|
    Specifies that either the preceding or following regular expression can be matched (alternation).

()
    Groups regular expressions.
    
{n,m}
    Matches a range of occurrences of the single character (including a character specified by a regular expression) that immediately precedes it. {n} will match exactly n occurr ences, {n,} will match at least n occurr ences, and {n,m} will match any number of occurrences between n and m. (POSIX egrep and POSIX awk, not in traditional egrep or awk.)
    
The backslash (\) metacharacter transforms metacharacters into ordinary characters (and ordinary characters into metacharacters). It forces the literal interpretation of any metacharacter such that it will match itself.    
    
sed uses the backslash to cause a group of ordinary characters to be interpr eted as metacharacters
\( \) \{ \} \n    

the following regular expression:
80.86
would match lines containing refer ences to “80286,” “80386,” or “80486.” * To match a decimal point or a period, you must escape the dot with a backslash.

The process of writing a regular expression involves three steps:
1. Knowing what it is you want to match and how it might appear in the text.
2. Writing a pattern to describe what you want to match.
3. Testing the pattern to see what it matches.

squar e bracket metacharacters ([ ]) enclose the list of characters, any of which can occupy a single position.
If “what” might appear with either an initial capital letter or a lowercase letter, you can specify:
[Ww]hat
it could match “Whatever” or “somewhat.”

If a file contained structured heading macros, such as .H1, .H2, .H3, etc.
\.H[12345]

to extract headings from a gr oup of chapter files:
grep ’\.H[123]’ ch0[12]

you have to quote the pattern so that it is passed on to gr ep rather than interpreted by the shell.

to specify the differ ent punctuation marks that end a sentence:
.[!?;:,".] .
This expression matches “any character followed by an exclamation mark or question mark or semicolon or colon or comma or quotation mark or period and then followed by two spaces and any character.”

Special Characters in Character Classes
\ Escapes any special character (awk only)
- Indicates a range when not in the first or last position.
ˆ Indicates a reverse match only when in the first position.

The backslash is special only in awk, making it possible to write “[a\]1]” for a character class that will match an a, a right bracket, or a 1.


The hyphen character (-) allows you to specify a range of characters

[cC]hapter [1-9]
It matches the string “chapter” or “Chapter” followed by a space and then followed by any single-digit number from 1 to 9

Multiple ranges can be specified as well as intermixed with literal characters:
[0-9a-z?,.;:’"]
This expression will match “any single character that is numeric, lowercase alphabetic, or a question mark, comma, period, semicolon, colon, single quote, or quotation mark.”

each character class matches a single character. If you specify multiple classes, you are describing multiple consecutive characters such as:
[a-zA-Z][.?!]
This expression will match “any lowercase or uppercase letter followed by either a period, a question mark, or an exclamation mark.”

to match arithmetic operators, we put the hyphen (-) first
[-+*/]

Trying to match dates with a regular expression is an interesting problem. Here are two possible formats:
MM-DD-YY
MM/DD/YY

The following regular expression indicates the possible range of values for each character position:
[0-1][0-9][-/][0-3][0-9][-/][0-9][0-9]

Either “-” or “/” could be the delimiter. Putting the hyphen in the first position ensur es that it will be interpreted in a character class literally, as a hyphen, and not as indicating a range.

Excluding a class of characters
match any non-numeric character:
[ˆ0-9]
It matches all uppercase and lowercase letters of the alphabet and all special characters such as punctuation marks.

match any consonant, you could simply exclude vowels:
[ˆaeiou]
This expression would match any consonant, any vowel in uppercase, and any punctuation mark or special character.


POSIX Character Classes
[:alnum:] Printable characters (includes whitespace)
[:alpha:] Alphabetic characters
[:blank:] Space and tab characters
[:cntrl:] Control characters
[:digit:] Numeric characters
[:graph:] Printable and visible (non-space) characters
[:lower:] Lowercase characters
[:print:] Printable characters (includes whitespace)
[:punct:] Punctuation characters
[:space:] Whitespace characters
[:upper:] Uppercase characters
[:xdigit:] Hexadecimal digits

these features are not widely available yet, the scripts in this book will not rely on them

use the asterisk metacharacter to match a word that might appear in quotes.
"*hypertext"*
The word “hypertext” will be matched regardless of whether it appears in quotes or not.

1
5
10
50
100
500
1000
5000
The regular expression
[15]0*
would match all lines, whereas the regular expression
[15]00*
would match all but the first two lines. The first zero is a literal, but the second is modified by the asterisk, meaning it might or might not be present

match any string inside of quotation marks
".*"
This would match all characters between the first and last quotation marks on the line plus the quotation marks.

angle brackets is a common notation for enclosing formatting instructions used in markup languages. You could print all lines with these marks by specifying:
$ grep ’<.*>’ sample


I can do it
I cannot do it
I can not do it
I can’t do it
I cant do it

to match each form of the negative statement, but not the positive statement, the following regular expression would do it:
can[ no’]*t
The asterisk causes any of the characters in the class to be matched in any order and for any number of occurrences.

The ability to match “zero or mor e” of something is known by the technical term “closur e.” The extended set of metacharacters used by egrep and awk provides several variations of closure that can be quite useful.

earlier example of matching one or more spaces can be simplified as such:
 +
The plus sign metacharacter can be thought of as “at least one” of the preceding character.

regular expression to match “80286,” “80386,” and “80486.” If we wanted to also match the string “8086,” we could write a regular expr ession that could be used with egrep or awk:
80[234]?86

It matches the string “80” followed by a “2,” a “3,” a “4,” or no character followed by the string “86.”

<space>book.*<space>
This expression matches the string “book” followed by “any number of characters or none followed by a space.”

<space>book.?<space>
would match “book,” “books,” and “booky” but not “bookish” and “bookworm.” 

The circumflex (ˆ) metacharacter is a single-character regular expression indicating the beginning of a line. The dollar sign ($) metacharacter is a single-character regular expression indicating the end of a line. These are often referred to as “anchors”

<space><space>*$
match lines with one or more spaces at the end of a line:

ˆ$
to match blank lines:

ˆ *$
match a blank line even if it contains spaces:

11*0
...will match each of the following lines:
10
110
111110
1111111111111111111111111110

specify the minimum and maximum number of occurrences of a literal character or regular expression.
\{ and \} are available in grep and sed. * POSIX egrep and POSIX awk use { and }.
the braces enclose one or two arguments.
\{n,m\}

specify \{n,\}, then at least n occurrences will be matched. If you specify \{n,m\}, then any number of occurrences between n and m will be matched.
the following expression will match “1001,” “10001,” and “100001” but not “101” or “1000001”:
10\{2,4\}1

can also be used to match format-\ted data such as phone numbers, U.S. social security numbers
the format of a social security number is three digits, a hyphen, followed by two digits, a hyphen, and then four digits. That pattern could be described as follows:
[0-9]\{3\}-[0-9]\{2\}-[0-9]\{4\}

local phone number could be described with the following regular expression:
[0-9]\{3\}-[0-9]\{4\}

The vertical bar (|) metacharacter, part of the extended set of metacharacters, allows you to specify a union of regular expressions.
UNIX|LINUX
will match lines containing either the string “UNIX” or the string “LINUX”.

Parentheses, ( ), are used to group regular expressions and establish precedence.
BigOne( Computer)?
This expression will match the string “BigOne” by itself or followed by a single occurr ence of the string “ Computer”.

compan(y|ies)
match of the singular or plural of the word “company.”


using bookwards file as a test
a “hit” (>) and included in the output or a “miss” (<)


this doesnt work the way we want
grep ' book.* ' bookwords
- prints 8 of the 13 lines that we want to match and it prints 2 of the lines that we don’t want to match.
- It ignores “book” at the beginning of a line and at the end
Needed - must use character classes (   list the members of the class inside square brackets )
 - list of characters that might end a word are punctuation marks, such as:
    ? . , ! ; : ’
 - quotation marks, parentheses, braces, and brackets might surround a word or open or close with a word:
    " () {} []
 - accommodate the plural or possessive forms of the word.
 
Before the word
["[{(]
and after the word
[]})"?!.,;:’s]
    Note that putting the closing square bracket as the first character in the class makes it a member of the class rather than closing the set
    
Final 
    <space>["[{(]*book[]})"?!.,;:’s]*<space>
grep ' ["[{(]*book.[]})"?!.,;:’s]* ' bookwords
